from flask import Flask, request, jsonify, render_template
import pynetbox
import os
from datetime import datetime
import logging
from config import NETBOX_CONFIG
import urllib3

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–º SSL
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

app = Flask(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Netbox
NETBOX_URL = NETBOX_CONFIG['URL']
NETBOX_TOKEN = NETBOX_CONFIG['TOKEN']

try:
    nb = pynetbox.api(
        NETBOX_URL,
        token=NETBOX_TOKEN,
        verify=False  # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
    )
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    nb.status()
    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Netbox –ø–æ –∞–¥—Ä–µ—Å—É: {NETBOX_URL}")
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Netbox: {str(e)}")

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/api/vms', methods=['GET'])
def get_vms():
    try:
        logger.info("üì• –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω...")
        vms = nb.virtualization.virtual_machines.all()
        vm_list = []
        for vm in vms:
            vm_data = {
                'id': vm.id,
                'name': vm.name,
                'date_expiry': vm.custom_fields.get('date_expiry', '')
            }
            vm_list.append(vm_data)
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ {len(vm_list)} –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω")
        return jsonify(vm_list)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ VM: {str(e)}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/vms/<int:vm_id>', methods=['PUT'])
def update_vm_date(vm_id):
    try:
        data = request.json
        new_date = data.get('date_expiry')
        logger.info(f"üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è VM ID {vm_id} –Ω–∞ {new_date}")
        
        vm = nb.virtualization.virtual_machines.get(vm_id)
        vm.custom_fields['date_expiry'] = new_date
        vm.save()
        
        logger.info(f"‚úÖ –î–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è VM ID {vm_id}")
        return jsonify({'message': 'Date updated successfully'})
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞—Ç—ã –¥–ª—è VM ID {vm_id}: {str(e)}")
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...")
    app.run(debug=True, port=8000) 